// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates user and returns JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials (email \u0026 password)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "description": "Публичный доступ: возвращает организацию текущего владельца (если авторизован) или 404 если нет. (Упростили доступ — без ограничения ролей)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Get organization of authenticated owner OR (public) first organization of that owner",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create organization for current user. Ограничение 1:1 действует ТОЛЬКО для role=owner. Админы (role=admin) могут создавать неограниченно.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Create organization",
                "parameters": [
                    {
                        "description": "Organization data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Partially update organization (owner/admin)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Update organization",
                "parameters": [
                    {
                        "description": "Fields to update",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/comment": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создаёт комментарий. user_id берётся из токена автоматически. Каждый не-nil и \u003e0 value обновляет агрегаты (sum,count,avg).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-comments"
                ],
                "summary": "Create comment for organization with optional parameter ratings",
                "parameters": [
                    {
                        "description": "Create comment",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationCommentCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationCommentCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/params/average": {
            "post": {
                "description": "Returns (avg(param1)+...)/N for specified params. Public access (без проверки роли).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-params"
                ],
                "summary": "Compute average across selected organization params",
                "parameters": [
                    {
                        "description": "Organization params average request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationParamsAverageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationParamsAverageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/params/average/by-type": {
            "post": {
                "description": "For every organization of a specified type computes (avg(p1)+...)/N and returns only those with average \u003e threshold (default 3.0).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-params"
                ],
                "summary": "Compute averages for each organization of given type",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationsParamsAverageByTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationsParamsAverageByTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/params/average/with-info": {
            "post": {
                "description": "Как /organization/params/average, но дополняет адресом/типом/координатами и путями изображений. Публично.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-params"
                ],
                "summary": "Compute average and return organization info",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationParamsWithOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationParamsWithOrgResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/public/by-address": {
            "post": {
                "description": "Возвращает организацию (id и основные поля) по точному адресу. Публично.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Public organization lookup by address",
                "parameters": [
                    {
                        "description": "Address lookup",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationByAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationByAddressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/{organization_id}/comments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает список комментариев организации с автором и средней оценкой.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-comments"
                ],
                "summary": "List comments for organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationCommentListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/{organization_id}/image/{kind}": {
            "get": {
                "description": "Возвращает файл изображения по типу (map | picture).",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "organization-media"
                ],
                "summary": "Get organization image (map or picture)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind (map|picture)",
                        "name": "kind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/{organization_id}/map/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Загрузка файла карты организации (png/jpg/jpeg/webp/gif). Требует роль owner/admin.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-media"
                ],
                "summary": "Upload organization map image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organization/{organization_id}/picture/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Загрузка основной картинки организации. Требует роль owner/admin.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization-media"
                ],
                "summary": "Upload organization picture image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user-params": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Saves user evaluation parameters. Requires JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-params"
                ],
                "summary": "Create user parameters",
                "parameters": [
                    {
                        "description": "User parameters",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateUserParamsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserParams"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user-params/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns user evaluation parameters. Requires JWT token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-params"
                ],
                "summary": "Get user parameters by user id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserParams"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Partially updates user evaluation parameters. Requires JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-params"
                ],
                "summary": "Partially update user parameters by user id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update (any subset)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateUserParamsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserParams"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.CreateUserParamsRequest": {
            "type": "object",
            "properties": {
                "appearance": {
                    "type": "boolean"
                },
                "calmness": {
                    "type": "boolean"
                },
                "intuitiveness": {
                    "type": "boolean"
                },
                "lighting": {
                    "type": "boolean"
                },
                "people_density": {
                    "type": "boolean"
                },
                "self_service": {
                    "type": "boolean"
                },
                "signage": {
                    "type": "boolean"
                },
                "smell": {
                    "type": "boolean"
                },
                "staff_attitude": {
                    "type": "boolean"
                },
                "tactility": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "boolean"
                }
            }
        },
        "handler.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handler.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationByAddressRequest": {
            "type": "object",
            "required": [
                "address"
            ],
            "properties": {
                "address": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationByAddressResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "map_path": {
                    "type": "string"
                },
                "organization_type": {
                    "type": "string"
                },
                "picture_path": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationCommentCreateRequest": {
            "type": "object",
            "required": [
                "organization_id"
            ],
            "properties": {
                "appearance_comment": {
                    "type": "string"
                },
                "appearance_value": {
                    "type": "integer"
                },
                "calmness_comment": {
                    "type": "string"
                },
                "calmness_value": {
                    "type": "integer"
                },
                "intuitiveness_comment": {
                    "type": "string"
                },
                "intuitiveness_value": {
                    "type": "integer"
                },
                "lighting_comment": {
                    "type": "string"
                },
                "lighting_value": {
                    "type": "integer"
                },
                "organization_id": {
                    "type": "integer"
                },
                "people_density_comment": {
                    "type": "string"
                },
                "people_density_value": {
                    "type": "integer"
                },
                "self_service_comment": {
                    "type": "string"
                },
                "self_service_value": {
                    "type": "integer"
                },
                "signage_comment": {
                    "type": "string"
                },
                "signage_value": {
                    "type": "integer"
                },
                "smell_comment": {
                    "type": "string"
                },
                "smell_value": {
                    "type": "integer"
                },
                "staff_attitude_comment": {
                    "type": "string"
                },
                "staff_attitude_value": {
                    "type": "integer"
                },
                "tactility_comment": {
                    "type": "string"
                },
                "tactility_value": {
                    "type": "integer"
                },
                "temperature_comment": {
                    "type": "string"
                },
                "temperature_value": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationCommentCreateResponse": {
            "type": "object",
            "properties": {
                "comment": {
                    "$ref": "#/definitions/model.OrganizationComment"
                },
                "updated_aggregates": {
                    "$ref": "#/definitions/model.OrganizationParams"
                }
            }
        },
        "handler.OrganizationCommentListItem": {
            "type": "object",
            "properties": {
                "avg_val": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationCommentListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.OrganizationCommentListItem"
                    }
                },
                "organization_id": {
                    "type": "integer"
                }
            }
        },
        "handler.OrganizationCreateRequest": {
            "type": "object",
            "required": [
                "address",
                "organization_type"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "organization_type": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationParamsAverageRequest": {
            "type": "object",
            "required": [
                "organization_id",
                "params"
            ],
            "properties": {
                "organization_id": {
                    "type": "integer"
                },
                "params": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.OrganizationParamsAverageResponse": {
            "type": "object",
            "properties": {
                "average": {
                    "type": "number"
                },
                "organization_id": {
                    "type": "integer"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.OrganizationParamsWithOrgRequest": {
            "type": "object",
            "required": [
                "organization_id",
                "params"
            ],
            "properties": {
                "organization_id": {
                    "type": "integer"
                },
                "params": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.OrganizationParamsWithOrgResponse": {
            "type": "object",
            "properties": {
                "average": {
                    "type": "number"
                },
                "organization": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer"
                        },
                        "latitude": {
                            "type": "number"
                        },
                        "longitude": {
                            "type": "number"
                        },
                        "map_path": {
                            "type": "string"
                        },
                        "organization_type": {
                            "type": "string"
                        },
                        "picture_path": {
                            "type": "string"
                        }
                    }
                },
                "params": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.OrganizationUpdateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "organization_type": {
                    "type": "string"
                }
            }
        },
        "handler.OrganizationWithSelectedAverage": {
            "type": "object",
            "properties": {
                "average": {
                    "type": "number"
                },
                "organization": {},
                "params": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.OrganizationsParamsAverageByTypeRequest": {
            "type": "object",
            "required": [
                "organization_type",
                "params"
            ],
            "properties": {
                "organization_type": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "threshold": {
                    "description": "Optional threshold; if omitted, defaults to 3.0",
                    "type": "number"
                }
            }
        },
        "handler.OrganizationsParamsAverageByTypeResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.OrganizationWithSelectedAverage"
                    }
                },
                "organization_type": {
                    "type": "string"
                }
            }
        },
        "handler.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "handler.RegisterResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "model.Organization": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "description": "optional",
                    "type": "number"
                },
                "longitude": {
                    "description": "optional",
                    "type": "number"
                },
                "map_path": {
                    "description": "относительный путь к карте (изображение)",
                    "type": "string"
                },
                "organization_type": {
                    "type": "string"
                },
                "owner_id": {
                    "description": "ВНИМАНИЕ: для обычного владельца (role=owner) разрешаем только одну организацию логикой приложения; admin может иметь несколько",
                    "type": "integer"
                },
                "params": {
                    "$ref": "#/definitions/model.OrganizationParams"
                },
                "picture_path": {
                    "description": "относительный путь к общей картинке",
                    "type": "string"
                }
            }
        },
        "model.OrganizationComment": {
            "type": "object",
            "properties": {
                "appearance_comment": {
                    "type": "string"
                },
                "appearance_value": {
                    "type": "integer"
                },
                "avg_val": {
                    "description": "средняя по непустым параметрам (вычисляется при создании)",
                    "type": "number"
                },
                "calmness_comment": {
                    "type": "string"
                },
                "calmness_value": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "intuitiveness_comment": {
                    "type": "string"
                },
                "intuitiveness_value": {
                    "type": "integer"
                },
                "lighting_comment": {
                    "type": "string"
                },
                "lighting_value": {
                    "type": "integer"
                },
                "organization_id": {
                    "type": "integer"
                },
                "people_density_comment": {
                    "type": "string"
                },
                "people_density_value": {
                    "type": "integer"
                },
                "self_service_comment": {
                    "type": "string"
                },
                "self_service_value": {
                    "type": "integer"
                },
                "signage_comment": {
                    "type": "string"
                },
                "signage_value": {
                    "type": "integer"
                },
                "smell_comment": {
                    "type": "string"
                },
                "smell_value": {
                    "type": "integer"
                },
                "staff_attitude_comment": {
                    "type": "string"
                },
                "staff_attitude_value": {
                    "type": "integer"
                },
                "tactility_comment": {
                    "type": "string"
                },
                "tactility_value": {
                    "type": "integer"
                },
                "temperature_comment": {
                    "type": "string"
                },
                "temperature_value": {
                    "type": "integer"
                },
                "text": {
                    "description": "общий текст комментария (опционально)",
                    "type": "string"
                },
                "user_id": {
                    "description": "author of the comment",
                    "type": "integer"
                }
            }
        },
        "model.OrganizationParams": {
            "type": "object",
            "properties": {
                "appearance_avg": {
                    "type": "number"
                },
                "appearance_count": {
                    "type": "integer"
                },
                "appearance_sum": {
                    "type": "integer"
                },
                "calmness_avg": {
                    "type": "number"
                },
                "calmness_count": {
                    "type": "integer"
                },
                "calmness_sum": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "intuitiveness_avg": {
                    "type": "number"
                },
                "intuitiveness_count": {
                    "type": "integer"
                },
                "intuitiveness_sum": {
                    "type": "integer"
                },
                "lighting_avg": {
                    "type": "number"
                },
                "lighting_count": {
                    "type": "integer"
                },
                "lighting_sum": {
                    "type": "integer"
                },
                "organization_id": {
                    "type": "integer"
                },
                "people_density_avg": {
                    "type": "number"
                },
                "people_density_count": {
                    "type": "integer"
                },
                "people_density_sum": {
                    "type": "integer"
                },
                "self_service_avg": {
                    "type": "number"
                },
                "self_service_count": {
                    "type": "integer"
                },
                "self_service_sum": {
                    "type": "integer"
                },
                "signage_avg": {
                    "type": "number"
                },
                "signage_count": {
                    "type": "integer"
                },
                "signage_sum": {
                    "type": "integer"
                },
                "smell_avg": {
                    "type": "number"
                },
                "smell_count": {
                    "type": "integer"
                },
                "smell_sum": {
                    "type": "integer"
                },
                "staff_attitude_avg": {
                    "type": "number"
                },
                "staff_attitude_count": {
                    "type": "integer"
                },
                "staff_attitude_sum": {
                    "type": "integer"
                },
                "tactility_avg": {
                    "type": "number"
                },
                "tactility_count": {
                    "type": "integer"
                },
                "tactility_sum": {
                    "type": "integer"
                },
                "temperature_avg": {
                    "type": "number"
                },
                "temperature_count": {
                    "type": "integer"
                },
                "temperature_sum": {
                    "type": "integer"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "description": "например, \"user\", \"admin\"",
                    "type": "string"
                }
            }
        },
        "model.UserParams": {
            "type": "object",
            "properties": {
                "appearance": {
                    "type": "boolean"
                },
                "calmness": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "intuitiveness": {
                    "type": "boolean"
                },
                "lighting": {
                    "type": "boolean"
                },
                "people_density": {
                    "type": "boolean"
                },
                "self_service": {
                    "type": "boolean"
                },
                "signage": {
                    "type": "boolean"
                },
                "smell": {
                    "type": "boolean"
                },
                "staff_attitude": {
                    "type": "boolean"
                },
                "tactility": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "boolean"
                },
                "user_id": {
                    "description": "Один к одному",
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "2gis-calm-map API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
