services:
  postgres:
    image: postgres:17
    container_name: postgres
    # We want to reuse api/.env (one level up). Provide it via env_file so container gets DB_* variables.
    # IMPORTANT: variable interpolation like ${DB_PORT} happens at compose parse time.
    # For that to work you must either:
    #   a) run: docker compose --env-file ../.env -f deploy/docker-compose.yaml up -d
    #   b) or export the variables in your shell before running compose.
    # env_file itself does NOT supply values for interpolation expressions.
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      # Explicitly target the actual database; otherwise pg_isready tries to connect
      # to a DB named after the user (2gis_user) which we didn't create, producing FATAL logs.
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
  
  api:
    build:
      # Use current directory as build context so Dockerfile is found.
      context: .
      dockerfile: cmd/Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      DB_HOST: postgres
    restart: unless-stopped
    networks:
      - backend

volumes:
  pg_data:

networks:
  backend:
    driver: bridge